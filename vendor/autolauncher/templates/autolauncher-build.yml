variables:
    LAUNCH_IMAGE_NAME: ${CI_PROJECT_PATH}:${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}
    LAUNCH_CONFIG_PATH: configs/config.json
    OUTPUT_FOLDER: /gpfs/projects/bsc70/hpai/storage/data/images
    EXEC_HOSTS_FILE: some_file
    SINGULARITY_IMAGE: quay.io/singularity/singularity:v3.11.5-slim 
    LAUNCH_VERSION: ${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME} # qi
    TAGS: estufa # mininostrum, estufa or pepino

build:
  image: ci.atalaya.at/containers/docker:stable
  stage: build
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - time apk add bash
  script:
    - export LAUNCH_IMAGE_NAME=$(env LAUNCH_IMAGE_NAME=${LAUNCH_IMAGE_NAME} bash -c 'echo ${LAUNCH_IMAGE_NAME,,}')
    - >-
      echo -e "[global]\ntimeout = 60\nindex-url = https://pypi.org/simple\ntrusted-host = pypi.org\n               hpai.bsc.es\nextra-index-url = https://${pypi_user}:${pypi_pass}@hpai.bsc.es:11080/simple/\n" > pip.conf
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ci.atalaya.at
    - docker build -t ci.atalaya.at/${LAUNCH_IMAGE_NAME} -f containers/Dockerfile-${LAUNCH_TARGET}${DOCKERFILE_TAG} .
    - docker push ci.atalaya.at/${LAUNCH_IMAGE_NAME}
  rules:
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_AMD.*$/
      variables:
        LAUNCH_TARGET: amd
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_MN4.*$/
      variables:
        LAUNCH_TARGET: mn4
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_LOCAL.*$/
      variables:
        LAUNCH_TARGET: local
    - when: never
  tags: 
    - ${TAGS}

build_image_mn5:
  id_tokens:
    CI_JOB_JWT:
      aud:
        - https://pass.hpai.bsc.es:18200
  image:
    name: ci.atalaya.at/containers/docker:stable
  stage: build
  timeout: 6 hours
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - apk add --no-cache curl bash openssh rsync shadow unzip
    # Vault is required to be installed from source
    # otherwise we get Operation not permitted
    - |
      curl -O https://releases.hashicorp.com/vault/1.4.2/vault_1.4.2_linux_amd64.zip && \
      unzip vault_1.4.2_linux_amd64.zip && \
      mv vault /usr/local/bin/ && \
      chmod 0755 /usr/local/bin/vault && \
      rm -f vault_1.4.2_linux_amd64.zip

    - export OPENSTACK_USER="ubuntu"
    - export OPENSTACK_HOST="212.128.226.38"
    - export VAULT_ADDR=https://pass.hpai.bsc.es:18200
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=singularity-read-only jwt=$CI_JOB_JWT)"
    - export OPENSTACK_K=$(vault kv get --field=encoded_key secret/gitlab-ci/singularity/openstack-vm)
  script:
    - env | sort
    # Extract the .def file name from the commit title
    - export DEF_FILE=$(echo "${CI_COMMIT_TITLE}" | sed -e 's/.*<\([^]]*\)>.*/\1/g')
    - echo "The .def file is $DEF_FILE"

    # Connect to OpenStack copy the ssh key from secrets, decode key and do the ssh connection
    - mkdir -p ~/.ssh/ && chmod 0700 ~/.ssh
    - echo ${OPENSTACK_K} | base64 -d > ~/.ssh/ssh-key
    - chmod 0600 ~/.ssh/ssh-key
    - ssh-keygen -f ~/.ssh/ssh-key -p
    
    # Set-up names
    - export USERNAME="${CI_PROJECT_PATH%/*}"
    - export SHORT_SHA="${CI_COMMIT_SHORT_SHA}"
    - export REPO_NAME="${CI_PROJECT_PATH##*/}"
    # - export FINAL_DIR="/mnt/diskS/autolauncher/${USERNAME}/${REPO_NAME}/${SHORT_SHA}"
    - export FINAL_DIR="~/autolauncher/${USERNAME}/${REPO_NAME}/${SHORT_SHA}"
    - export REMOTE_DEF_PATH="${DEF_FILE}"
    - export FINAL_IMAGE_PATH="${FINAL_DIR}/${SHORT_SHA}.sif"
    - export REMOTE_OUTPUT_PATH="${OUTPUT_FOLDER}/${USERNAME}/${REPO_NAME}/${SHORT_SHA}"
    # - export REMOTE_CACHE_DIR="/tmp/${SHORT_SHA}"
    - echo "Image will be saved to $REMOTE_OUTPUT_PATH"

    # Set-up directories (image will be created ~/autolauncher/<repo_name>/<commit_id>.sif)
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${OPENSTACK_USER}@${OPENSTACK_HOST} "
        sudo mkdir -p ${FINAL_DIR} && \
        sudo chown -R ${OPENSTACK_USER}:${OPENSTACK_USER} ${FINAL_DIR}
      "

    # Clone the whole repo (we must do this to support requirements.txt)
    - rsync -az --delete ./ -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key" ./ ${OPENSTACK_USER}@${OPENSTACK_HOST}:${FINAL_DIR}/

    # Build
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${OPENSTACK_USER}@${OPENSTACK_HOST} "
        cd ${FINAL_DIR}/\$(dirname ${DEF_FILE}) && \
        sudo singularity build ${FINAL_IMAGE_PATH} \$(basename ${DEF_FILE}) 2>&1 | tee ${FINAL_DIR}/build.log \
      "

    # Artifacts
    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${OPENSTACK_USER}@${OPENSTACK_HOST} "sudo singularity exec ${FINAL_IMAGE_PATH} pip3 freeze > ${FINAL_DIR}/pip_freeze.txt 2>&1 || echo '[ERROR]   pip3 executable file not found in PATH'"
    - mkdir -p autolauncher-output/
    - scp -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${OPENSTACK_USER}@${OPENSTACK_HOST}:${FINAL_DIR}/build.log autolauncher-output/
    - scp -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${OPENSTACK_USER}@${OPENSTACK_HOST}:${FINAL_DIR}/pip_freeze.txt autolauncher-output/

    # Send image to GPFS
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${OPENSTACK_USER}@${OPENSTACK_HOST} "
        if [ -f ${FINAL_IMAGE_PATH} ]; then
          sudo mkdir -p ${REMOTE_OUTPUT_PATH} &&
          sudo cp ${FINAL_IMAGE_PATH} ${REMOTE_OUTPUT_PATH}/ &&
          sudo cp ${FINAL_DIR}/build.log ${REMOTE_OUTPUT_PATH}/ &&
          sudo cp ${FINAL_DIR}/pip_freeze.txt ${REMOTE_OUTPUT_PATH}/ &&
          sudo cp ${FINAL_DIR}/${DEF_FILE} ${REMOTE_OUTPUT_PATH}/recipe.def &&
          sudo chmod -R 774 ${REMOTE_OUTPUT_PATH} && \
          sudo rm -rf ${FINAL_DIR}
        else
          echo '[ERROR]:   Singularity image was not built. It does not exists in the current filesystem: $FINAL_IMAGE_PATH' >&2
          sudo rm -rf ${FINAL_DIR}
          exit 1
        fi
      "

    - |
      echo " "
      echo " "
      echo "       Singularity image saved to GPFS: "
      echo "       ${REMOTE_OUTPUT_PATH}/${SHORT_SHA}.sif "
      echo " "
      echo "       Python dependencies stored in: "
      echo "       ${REMOTE_OUTPUT_PATH}/pip_freeze.txt "
      echo " "
      echo "       Definition file used for this build stored in: "
      echo "       ${REMOTE_OUTPUT_PATH}/recipe.def"
      echo " "
      echo " "

  artifacts:
    paths:
        - autolauncher-output/
    expire_in: never # permanent
  rules:
    - if: $CI_COMMIT_TITLE =~ /^BUILD_IMAGE_MN5 <.+>.*$/
    - when: never
  tags:
    - estufa
